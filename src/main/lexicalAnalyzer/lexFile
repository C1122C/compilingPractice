%{
/*test*/
%}

/*RE*/
letter a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
number 0|1|2|3|4|5|6|7|8|9
id {letter}+({letter}|{number})*
integer {number}+
FLOAT {number}+$.{number}+

%%
{letter} {Token<letter_}
{number} {Token<number_}
{id} {Token<id_}
{integer} {Token<int_}
{point} {Token<MARK_POINT>}
{FLOAT} {Token<float_}
else {Token<KW_ELSE>}
String {Token<TYPE_STRING>}
int {Token<TYPE_INT>}
char {Token<TYPE_CHAR>}
float {Token<TYPE_FLOAT>}
boolean {Token<TYPE_BOOLEAN>}
public {Token<KW_PUBLIC>}
class {Token<KW_CLASS>}
true {Token<KW_TRUE>}
static {Token<KW_STATIC>}
void {Token<KW_VOID>}
switch {Token<KW_SWITCH>}
break {Token<KW_BREAK>}
case {Token<KW_CASE>}
return {Token<KW_RETURN>}
for {Token<KW_FOR>}
void {Token<KW_VOID>}
continue {Token<KW_CONTINUE>}
default {Token<KW_DEFAULT>}
if {Token<KW_IF>}
static {Token<KW_STATIC>}
do {Token<KW_DO>}
while {Token<KW_WHILE>}
"%" {Token<OP_MOD>}
"-" {Token<OP_SUB>}
"/" {Token<OP_DEV>}
"--" {Token<OP_SUB_SELF>}
"==" {Token<OP_EQU>}
"=" {Token<OP_ASS>}
"!=" {Token<OP_N_EQU>}
">" {Token<OP_MORE>}
"<" {Token<OP_LESS>}
">=" {Token<OP_E_MORE>}
"<=" {Token<OP_E_LESS>}
"&&" {Token<OP_AND>}
"!" {Token<OP_NOT>}
";" {Token<MARK_SEMICOLON}
":" {Token<MARK_COLON>}
"," {Token<MARK_COMMA>}
"$*" {Token<OP_MUL>}
"$." {Token<MARK_POINT>}
"$(" {Token<MARK_LEFT_PARENTHESIS>}
"$)" {Token<MARK_RIGHT_PARENTHESIS>}
"$+" {Token<OP_ADD>}
"$|" {Token<OP_OR>}
"${" {Token<MARK_LEFT_BRACE>}
"$}" {Token<MARK_RIGHT_BRACE>}
"$[" {Token<MARK_LEFT_BRACKET>}
"$]" {Token<MARK_RIGHT_BRACKET>}
"$?" {Token<MARK_QUESTION>}


%%
public String InstallID(String name){
        IDetail idetail=new IDetail(begin,length);
        IDTable.put(name,idetail);
        return name;
    }


    public String InstallNum(String name,int v){
        NumDetail numdetail=new NumDetail(begin,length,v);
        NumTable.put(name,numdetail);
        return name;
    }